{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["getRandomInt","max","Math","floor","random","getNextSet","nextAnswer","fourth","first","hints","indexToGuess","guesses","sort","a","b","App","useState","currentSet","setCurrentSet","numberCorrect","setNumberCorrect","numberWrong","setNumberWrong","selectedAnswer","setSelectedAnswer","useEffect","setTimeout","className","map","hint","idx","style","margin","guess","background","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8NAAe,I,MCIf,SAASA,EAAaC,GACpB,OAAOC,KAAKC,MAAMD,KAAKE,SAAWF,KAAKC,MAAMF,IAG/C,IACMI,EAAa,WACjB,IAAMC,EAAaN,EAFH,IAE6B,EACvCO,EAASD,EAAa,EAGtBE,EAAQF,EAAa,EAErBG,EAAQ,CAACD,EAHAF,EAAa,EADdA,EAIuBC,GAC/BG,EAAeV,EAAa,GASlC,MAAO,CACLS,QACAE,QATc,CACdF,EAAMC,GACNF,EAAQ,EACRD,EAAS,EACTP,EAAa,GAAKO,EAAS,EAAIC,EAAQ,GAKtBI,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,KACpCJ,iBA2EWK,MAvEf,WAAgB,IAAD,EACuBC,mBAASX,KADhC,mBACNY,EADM,KACMC,EADN,KAGLT,EAAiCQ,EAAjCR,MAAOE,EAA0BM,EAA1BN,QAASD,EAAiBO,EAAjBP,aAHX,EAK6BM,mBAAS,GALtC,mBAKNG,EALM,KAKSC,EALT,OAOyBJ,mBAAS,GAPlC,mBAONK,EAPM,KAOOC,EAPP,OAS+BN,mBAAS,MATxC,mBASNO,EATM,KASUC,EATV,KA0Bb,OAXAC,qBAAU,WACe,OAAnBF,GACFG,YACE,WACEF,EAAkB,MAPxBN,EAAcb,OAUVkB,IAAmBd,EAAMC,GAAgB,IAAM,OAGlD,CAACa,IAEF,sBAAKI,UAAU,MAAf,UACE,qBAAKA,UAAU,OAAf,SACGlB,EAAMmB,KAAI,SAACC,EAAMC,GAAP,OACT,sBAAMC,MAAO,CAAEC,OAAQ,IAAvB,SACGF,IAAQpB,EAAe,IAAMmB,SAIpC,qBAAKF,UAAU,UAAf,SACGhB,EAAQiB,KAAI,SAACK,GAAD,OACX,wBACEF,MAAO,CACLG,WACqB,OAAnBX,EACI,YACAU,IAAUxB,EAAMC,GAChB,QACAuB,IAAUV,EACV,MACA,aAERY,QAAS,WACHF,IAAUxB,EAAMC,GAClBU,EAAiBD,EAAgB,GAEjCG,EAAeD,EAAc,GAG/BG,EAAkBS,IAlBtB,SAsBGA,GAFIA,QAMX,sBAAKN,UAAU,QAAf,UACE,mDAAsBR,KACtB,iDAAoBE,YCtFbe,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.58036bf1.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import { useEffect, useState, useMemo } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nfunction getRandomInt(max) {\n  return Math.floor(Math.random() * Math.floor(max));\n}\n\nconst maxNumber = 23;\nconst getNextSet = () => {\n  const nextAnswer = getRandomInt(maxNumber) + 5;\n  const fourth = nextAnswer + 1;\n  const third = nextAnswer;\n  const second = nextAnswer - 1;\n  const first = nextAnswer - 2;\n\n  const hints = [first, second, third, fourth];\n  const indexToGuess = getRandomInt(4);\n\n  const guesses = [\n    hints[indexToGuess],\n    first - 1,\n    fourth + 1,\n    getRandomInt(2) ? fourth + 2 : first - 2,\n  ];\n\n  return {\n    hints,\n    guesses: guesses.sort((a, b) => a - b),\n    indexToGuess,\n  };\n};\n\nfunction App() {\n  const [currentSet, setCurrentSet] = useState(getNextSet());\n\n  const { hints, guesses, indexToGuess } = currentSet;\n\n  const [numberCorrect, setNumberCorrect] = useState(0);\n\n  const [numberWrong, setNumberWrong] = useState(0);\n\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\n\n  const nextQuestion = () => {\n    setCurrentSet(getNextSet());\n  };\n\n  useEffect(() => {\n    if (selectedAnswer !== null) {\n      setTimeout(\n        () => {\n          setSelectedAnswer(null);\n          nextQuestion();\n        },\n        selectedAnswer === hints[indexToGuess] ? 100 : 2000\n      );\n    }\n  }, [selectedAnswer]);\n  return (\n    <div className=\"App\">\n      <div className=\"word\">\n        {hints.map((hint, idx) => (\n          <span style={{ margin: 10 }}>\n            {idx === indexToGuess ? \"_\" : hint}\n          </span>\n        ))}\n      </div>\n      <div className=\"answers\">\n        {guesses.map((guess) => (\n          <button\n            style={{\n              background:\n                selectedAnswer === null\n                  ? \"lightgrey\"\n                  : guess === hints[indexToGuess]\n                  ? \"green\"\n                  : guess === selectedAnswer\n                  ? \"red\"\n                  : \"lightgrey\",\n            }}\n            onClick={() => {\n              if (guess === hints[indexToGuess]) {\n                setNumberCorrect(numberCorrect + 1);\n              } else {\n                setNumberWrong(numberWrong + 1);\n              }\n\n              setSelectedAnswer(guess);\n            }}\n            key={guess}\n          >\n            {guess}\n          </button>\n        ))}\n      </div>\n      <div className=\"stats\">\n        <div>Number correct: {numberCorrect}</div>\n        <div>Number wrong: {numberWrong}</div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}